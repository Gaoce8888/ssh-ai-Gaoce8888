export class ConfigManager{constructor(){this.apiEndpoint="/api_configs.json",this.configs={ssh_configs:[],ai_config:null}}async init(){await this.loadConfigs(),console.log("配置管理器初始化完成")}async loadConfigs(){try{const s=await fetch(this.apiEndpoint);if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);const o=await s.json();return this.configs=o,o}catch(s){return console.error("加载配置失败:",s),{ssh_configs:[],ai_config:null}}}async saveConfigs(){try{const s=await fetch(this.apiEndpoint,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(this.configs)});if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);const o=await s.json();if(!o.success)throw new Error(o.message||"保存失败");return!0}catch(s){throw console.error("保存配置失败:",s),s}}async getSSHConfigs(){try{const s=localStorage.getItem("sshConfigs");if(s){const o=JSON.parse(s);return console.log("从localStorage加载SSH配置:",o),this.configs.ssh_configs=o,o}}catch(s){console.warn("从localStorage读取SSH配置失败:",s)}return await this.loadConfigs(),this.configs.ssh_configs||[]}async saveSSHConfig(s){try{if(!s.name||!s.host||!s.username)throw new Error("配置信息不完整");await this.loadConfigs(),this.configs.ssh_configs||(this.configs.ssh_configs=[]);const o=this.configs.ssh_configs.findIndex(o=>o.name===s.name);return o>=0?this.configs.ssh_configs[o]=s:this.configs.ssh_configs.push(s),localStorage.setItem("sshConfigs",JSON.stringify(this.configs.ssh_configs)),console.log("SSH配置已保存到localStorage:",s),!0}catch(s){throw console.error("保存SSH配置失败:",s),new Error("保存SSH配置到本地存储失败")}}async deleteSSHConfig(s){try{if(await this.getSSHConfigs(),s<0||s>=this.configs.ssh_configs.length)throw new Error("无效的配置索引");return this.configs.ssh_configs.splice(s,1),localStorage.setItem("sshConfigs",JSON.stringify(this.configs.ssh_configs)),console.log("SSH配置已删除，索引:",s),!0}catch(s){throw console.error("删除SSH配置失败:",s),new Error("删除SSH配置失败")}}async getAIConfig(){try{const s=localStorage.getItem("aiConfig");if(s){const o=JSON.parse(s);return console.log("从localStorage加载AI配置:",o),o}}catch(s){console.warn("从localStorage读取AI配置失败:",s)}return await this.loadConfigs(),this.configs.ai_config||{provider:"openai",apiKey:"",endpoint:"https://api.openai.com/v1/chat/completions",model:"gpt-3.5-turbo",maxTokens:2048,temperature:.7}}async saveAIConfig(s){try{return localStorage.setItem("aiConfig",JSON.stringify(s)),this.configs.ai_config=s,console.log("AI配置已保存到localStorage:",s),!0}catch(s){throw console.error("保存AI配置失败:",s),new Error("保存AI配置到本地存储失败")}}exportConfigs(){const s=JSON.stringify(this.configs,null,2),o="data:application/json;charset=utf-8,"+encodeURIComponent(s),n=`ssh-ai-terminal-configs-${(new Date).toISOString().slice(0,10)}.json`,t=document.createElement("a");t.setAttribute("href",o),t.setAttribute("download",n),t.click()}async importConfigs(s){return new Promise((o,n)=>{const t=new FileReader;t.onload=async s=>{try{const n=JSON.parse(s.target.result);if(!n.ssh_configs&&!n.ai_config)throw new Error("无效的配置文件格式");n.ssh_configs&&(this.configs.ssh_configs=[...this.configs.ssh_configs,...n.ssh_configs]),n.ai_config&&(this.configs.ai_config=n.ai_config),await this.saveConfigs(),o(!0)}catch(s){n(s)}},t.onerror=()=>{n(new Error("读取文件失败"))},t.readAsText(s)})}async clearAllConfigs(){return!!confirm("确定要清除所有配置吗？此操作不可恢复！")&&(this.configs={ssh_configs:[],ai_config:null},await this.saveConfigs(),localStorage.removeItem("aiConfig"),!0)}}