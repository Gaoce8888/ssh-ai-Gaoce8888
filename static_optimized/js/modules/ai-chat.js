export class AIChat{constructor(e,t){this.terminal=e,this.sshConnection=t,this.config={provider:"openai",apiKey:"",model:"gpt-3.5-turbo",maxTokens:1e3,endpoint:"https://api.openai.com/v1/chat/completions"},this.autoExecute=!1,this.terminalHistory=[],this.maxHistoryLength=100,this.commandQueue=[]}async init(){this.setupEventListeners(),this.loadAutoExecuteState(),console.log("AI聊天模块初始化完成")}setupEventListeners(){const e=document.getElementById("chat-input"),t=document.getElementById("chat-send");e.addEventListener("keypress",e=>{"Enter"!==e.key||e.shiftKey||(e.preventDefault(),this.sendMessage())}),t.addEventListener("click",()=>this.sendMessage());document.getElementById("auto-execute").addEventListener("change",e=>{this.autoExecute=e.target.checked,localStorage.setItem("aiAutoExecute",this.autoExecute),this.addSystemMessage(this.autoExecute?"自动执行模式已开启 - AI建议的命令将自动执行":"自动执行模式已关闭 - 需要手动确认执行命令")})}loadAutoExecuteState(){const e=localStorage.getItem("aiAutoExecute");this.autoExecute="true"===e,document.getElementById("auto-execute").checked=this.autoExecute}updateConfig(e){const t={...e};void 0!==t.temperature&&(t.temperature=parseFloat(t.temperature)),void 0!==t.maxTokens&&(t.maxTokens=parseInt(t.maxTokens)),this.config={...this.config,...t},this.updateProviderDisplay()}updateProviderDisplay(){const e=document.getElementById("current-ai-provider");e&&(e.textContent="claude"===this.config.provider?"Claude":"OpenAI")}async sendMessage(){const e=document.getElementById("chat-input"),t=e.value.trim();t&&(this.addMessage(t,"user"),e.value="",await this.processMessage(t))}async processMessage(e){if(!this.config.apiKey)return void this.addMessage("请先在AI设置中配置API Key","ai");const t=this.addLoadingMessage();try{const s=this.getTerminalContext(),n=await this.callAIAPI(e,s);this.removeMessage(t),this.handleAIResponse(n)}catch(e){console.error("AI处理失败:",e),this.removeMessage(t),this.addMessage(`错误: ${e.message}`,"ai")}}async callAIAPI(e,t){const s=`你是一个SSH终端助手。用户可能会询问关于终端操作的问题。\n如果用户要求执行命令，请返回JSON格式：{"type": "command", "command": "要执行的命令", "description": "命令说明"}。\n否则返回JSON格式：{"type": "text", "content": "回答内容"}。\n\n当前终端上下文：\n${t}`,n=await fetch("/api/ai/chat",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({message:e,session_id:this.getCurrentSessionId(),ai_config:{provider:this.config.provider||"openai",apiKey:this.config.apiKey,model:this.config.model||"gpt-3.5-turbo",temperature:parseFloat(this.config.temperature)||.7,maxTokens:parseInt(this.config.maxTokens)||2048,systemPrompt:s}})});if(!n.ok){const e=await n.text();throw new Error(`API请求失败: ${n.status} ${n.statusText} - ${e}`)}return(await n.json()).response}getCurrentSessionId(){return window.sshConnection&&window.sshConnection.sessionId?window.sshConnection.sessionId:null}handleAIResponse(e){try{const t=JSON.parse(e);"command"===t.type&&t.command?(this.addMessage(`建议执行命令: \`${t.command}\`\n${t.description||""}`,"ai"),this.autoExecute?(this.executeCommand(t.command),this.addSystemMessage(`正在自动执行命令: ${t.command}`)):this.addCommandMessage(t.command)):"text"===t.type?this.addMessage(t.content,"ai"):this.addMessage(e,"ai")}catch(t){this.addMessage(e,"ai")}}executeCommand(e){if(!this.sshConnection.isConnected)return void this.addSystemMessage("错误: SSH未连接");this.commandQueue.push({command:e,timestamp:new Date,output:""});this.sshConnection.sendCommand(e)&&this.addToHistory(`$ ${e}\n`)}addCommandMessage(e){const t=document.getElementById("chat-messages"),s=`msg-${Date.now()}`,n=document.createElement("div");n.className="chat-message system",n.id=s,n.innerHTML=`\n            <div class="message-content">\n                <p>是否执行命令: <code>${this.escapeHtml(e)}</code>?</p>\n                <div style="margin-top: 8px; display: flex; gap: 8px; justify-content: center;">\n                    <button class="btn btn-primary" data-command="${this.escapeHtml(e)}">执行</button>\n                    <button class="btn btn-secondary">取消</button>\n                </div>\n            </div>\n        `;const a=n.querySelector(".btn-primary"),o=n.querySelector(".btn-secondary");a.addEventListener("click",()=>{this.executeCommand(e),n.remove(),this.addSystemMessage(`执行命令: ${e}`)}),o.addEventListener("click",()=>{n.remove()}),t.appendChild(n),this.scrollToBottom()}sendQuickPrompt(e){document.getElementById("chat-input").value=e,this.sendMessage()}addMessage(e,t){const s=document.getElementById("chat-messages"),n=`msg-${Date.now()}`,a=document.createElement("div");a.className=`chat-message ${t}`,a.id=n;const o=document.createElement("div");return o.className="message-content",o.innerHTML=this.formatMessage(e),a.appendChild(o),s.appendChild(a),this.scrollToBottom(),n}addSystemMessage(e){return this.addMessage(e,"system")}addLoadingMessage(){const e=document.getElementById("chat-messages"),t=`msg-${Date.now()}`,s=document.createElement("div");return s.className="chat-message ai",s.id=t,s.innerHTML='\n            <div class="message-content">\n                <div class="message-loading">\n                    <span></span>\n                    <span></span>\n                    <span></span>\n                </div>\n            </div>\n        ',e.appendChild(s),this.scrollToBottom(),t}removeMessage(e){const t=document.getElementById(e);t&&t.remove()}formatMessage(e){let t=this.escapeHtml(e);return t=t.replace(/```(\w+)?\n([\s\S]*?)```/g,(e,t,s)=>`<pre><code class="language-${t||"plaintext"}">${s.trim()}</code></pre>`),t=t.replace(/`([^`]+)`/g,"<code>$1</code>"),t=t.replace(/https?:\/\/[^\s]+/g,e=>`<a href="${e}" target="_blank" rel="noopener">${e}</a>`),t=t.replace(/\n/g,"<br>"),t}escapeHtml(e){const t=document.createElement("div");return t.textContent=e,t.innerHTML}scrollToBottom(){const e=document.getElementById("chat-messages");e.scrollTop=e.scrollHeight}getTerminalContext(){return this.terminalHistory.slice(-20).join("")}addToHistory(e){this.terminalHistory.push(e),this.terminalHistory.length>this.maxHistoryLength&&this.terminalHistory.shift()}clearHistory(){this.terminalHistory=[]}}