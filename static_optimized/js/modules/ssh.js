export class SSHConnection{constructor(t){this.terminal=t,this.ws=null,this.sessionId=null,this.isConnected=!1,this.connectionConfig=null,this.reconnectAttempts=0,this.maxReconnectAttempts=5,this.reconnectDelay=3e3,this.pingInterval=null,this.terminalDataHandler=null,this.resizeHandler=null,this.connectionTimeout=null}async init(){console.log("SSH连接模块初始化")}async connect(t){if(this.isConnected)throw new Error("已经连接到服务器");return this.connectionConfig=t,this.updateConnectionStatus("connecting"),this.terminal.writeln("\r\n*** 正在连接到 SSH 服务器... ***"),this.terminal.writeln(`*** 目标: ${t.username}@${t.host}:${t.port} ***\r\n`),new Promise((e,n)=>{try{const s=`${"https:"===window.location.protocol?"wss:":"ws:"}//${window.location.host}/ws`;this.ws=new WebSocket(s),this.connectionTimeout=setTimeout(()=>{this.ws&&this.ws.close(),this.terminal.writeln("\r\n*** 连接超时 ***\r\n"),n(new Error("连接超时 - 请检查网络连接"))},15e3),this.ws.onopen=()=>{console.log("WebSocket连接已建立"),this.terminal.writeln("*** WebSocket连接已建立 ***"),this.ws.send(JSON.stringify({type:"connect",host:t.host,port:parseInt(t.port)||22,username:t.username,password:t.password})),this.terminal.writeln("*** 正在进行SSH认证... ***")},this.ws.onmessage=t=>{try{const s=JSON.parse(t.data);this.handleMessage(s,e,n)}catch(t){console.error("处理消息失败:",t),this.terminal.writeln(`\r\n*** 消息处理错误: ${t.message} ***\r\n`)}},this.ws.onerror=t=>{this.connectionTimeout&&(clearTimeout(this.connectionTimeout),this.connectionTimeout=null),console.error("WebSocket错误:",t),this.terminal.writeln("\r\n*** WebSocket连接错误 ***\r\n"),this.handleError(t),n(new Error("WebSocket连接失败"))},this.ws.onclose=t=>{this.connectionTimeout&&(clearTimeout(this.connectionTimeout),this.connectionTimeout=null),console.log("WebSocket连接已关闭, 代码:",t.code,"原因:",t.reason),this.terminal.writeln(`\r\n*** WebSocket连接已关闭 (${t.code}) ***\r\n`),this.handleClose(t)}}catch(t){this.connectionTimeout&&(clearTimeout(this.connectionTimeout),this.connectionTimeout=null),this.terminal.writeln(`\r\n*** 连接初始化失败: ${t.message} ***\r\n`),n(t)}})}handleMessage(t,e,n){switch(t.type){case"connected":this.connectionTimeout&&(clearTimeout(this.connectionTimeout),this.connectionTimeout=null),this.sessionId=t.session_id,this.isConnected=!0,this.reconnectAttempts=0,this.updateConnectionStatus("connected"),this.setupTerminalHandlers(),this.startPingInterval(),this.terminal.writeln("\r\n*** SSH连接成功建立! ***"),this.terminal.writeln("*** 终端已准备就绪 ***\r\n"),e&&e();break;case"data":t.data&&this.terminal.write(t.data);break;case"error":this.connectionTimeout&&(clearTimeout(this.connectionTimeout),this.connectionTimeout=null);let s=t.message;console.error("SSH错误:",s),s.includes("网络超时")||s.includes("NetworkTimeout")?s="网络连接超时 - 请检查目标服务器是否可达，端口是否开放":s.includes("认证失败")||s.includes("AuthenticationFailed")?s="SSH认证失败 - 请检查用户名和密码是否正确":s.includes("握手失败")||s.includes("HandshakeFailed")?s="SSH握手失败 - 目标服务器可能不支持SSH协议或服务未启动":(s.includes("通道创建失败")||s.includes("ChannelCreationFailed"))&&(s="SSH通道创建失败 - 服务器配置问题"),this.terminal.writeln(`\r\n*** 连接失败: ${s} ***`),this.terminal.writeln("*** 请检查连接配置和网络状态 ***\r\n"),this.updateConnectionStatus("disconnected"),n&&!this.isConnected&&n(new Error(s));break;case"disconnected":this.handleDisconnect();break;case"pong":break;default:console.warn("未知消息类型:",t.type)}}setupTerminalHandlers(){this.terminalDataHandler=this.terminal.onData(t=>{this.ws&&this.ws.readyState===WebSocket.OPEN&&this.sessionId&&this.ws.send(JSON.stringify({type:"data",session_id:this.sessionId,data:t}))}),this.resizeHandler=this.terminal.onResize(t=>{this.ws&&this.ws.readyState===WebSocket.OPEN&&this.sessionId&&this.ws.send(JSON.stringify({type:"resize",session_id:this.sessionId,cols:t.cols,rows:t.rows}))})}startPingInterval(){this.pingInterval=setInterval(()=>{this.ws&&this.ws.readyState===WebSocket.OPEN&&this.ws.send(JSON.stringify({type:"ping",session_id:this.sessionId}))},3e4)}stopPingInterval(){this.pingInterval&&(clearInterval(this.pingInterval),this.pingInterval=null)}async disconnect(){this.isConnected&&(this.isConnected=!1,this.stopPingInterval(),this.terminalDataHandler&&(this.terminalDataHandler.dispose(),this.terminalDataHandler=null),this.resizeHandler&&(this.resizeHandler.dispose(),this.resizeHandler=null),this.ws&&this.ws.readyState===WebSocket.OPEN&&(this.sessionId&&this.ws.send(JSON.stringify({type:"disconnect",session_id:this.sessionId})),this.ws.close()),this.ws=null,this.sessionId=null,this.updateConnectionStatus("disconnected"),this.terminal.writeln("\r\n*** 连接已断开 ***\r\n"))}handleError(t){console.error("连接错误:",t),this.updateConnectionStatus("error")}handleClose(t){this.isConnected=!1,this.stopPingInterval(),this.terminalDataHandler&&(this.terminalDataHandler.dispose(),this.terminalDataHandler=null),this.resizeHandler&&(this.resizeHandler.dispose(),this.resizeHandler=null),1e3!==t.code&&this.reconnectAttempts<this.maxReconnectAttempts?this.attemptReconnect():this.updateConnectionStatus("disconnected")}handleDisconnect(){this.isConnected=!1,this.sessionId=null,this.updateConnectionStatus("disconnected"),this.terminal.writeln("\r\n*** SSH连接已断开 ***\r\n")}async attemptReconnect(){!this.connectionConfig||this.reconnectAttempts>=this.maxReconnectAttempts||(this.reconnectAttempts++,this.updateConnectionStatus("reconnecting"),this.terminal.writeln(`\r\n*** 尝试重新连接 (${this.reconnectAttempts}/${this.maxReconnectAttempts}) ***\r\n`),setTimeout(async()=>{try{await this.connect(this.connectionConfig)}catch(t){console.error("重连失败:",t)}},this.reconnectDelay))}updateConnectionStatus(t){const e=document.getElementById("connection-status"),n=document.getElementById("connect-btn");if(e)switch(t){case"connected":e.className="connection-status connected",e.querySelector(".status-text").textContent="已连接",n&&(n.textContent="断开");break;case"connecting":e.className="connection-status connecting",e.querySelector(".status-text").textContent="连接中...",n&&(n.disabled=!0);break;case"reconnecting":e.className="connection-status connecting",e.querySelector(".status-text").textContent="重新连接中...";break;case"disconnected":e.className="connection-status disconnected",e.querySelector(".status-text").textContent="未连接",n&&(n.textContent="连接",n.disabled=!1);break;case"error":e.className="connection-status disconnected",e.querySelector(".status-text").textContent="连接错误",n&&(n.disabled=!1)}}sendCommand(t){return!(!this.ws||this.ws.readyState!==WebSocket.OPEN||!this.sessionId)&&(this.ws.send(JSON.stringify({type:"data",session_id:this.sessionId,data:t+"\n"})),!0)}getSessionInfo(){return{sessionId:this.sessionId,isConnected:this.isConnected,config:this.connectionConfig}}async testConnection(t){this.terminal.writeln("\r\n*** 开始连接诊断 ***\r\n"),this.terminal.writeln("1. 测试WebSocket连接...");const e=await this.testWebSocketConnection();return e.success?(this.terminal.writeln("   ✓ WebSocket连接正常"),this.terminal.writeln("\r\n2. 测试SSH服务器连接..."),this.terminal.writeln(`   目标: ${t.host}:${t.port}`),this.terminal.writeln("   注意: 如果目标服务器无法访问，连接将会失败"),!0):(this.terminal.writeln(`   ✗ WebSocket连接失败: ${e.error}`),!1)}async testWebSocketConnection(){return new Promise(t=>{const e=`${"https:"===window.location.protocol?"wss:":"ws:"}//${window.location.host}/ws`,n=new WebSocket(e),s=setTimeout(()=>{n.close(),t({success:!1,error:"连接超时"})},5e3);n.onopen=()=>{clearTimeout(s),n.close(),t({success:!0})},n.onerror=e=>{clearTimeout(s),t({success:!1,error:"连接错误"})}})}async connectWithDiagnostics(t,e=!0){if(e){if(!await this.testConnection(t))throw new Error("连接诊断失败，请检查网络配置");this.terminal.writeln("\r\n*** 诊断完成，开始建立连接 ***\r\n")}return this.connect(t)}}