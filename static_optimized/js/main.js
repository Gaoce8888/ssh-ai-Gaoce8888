class LoginManager{constructor(){this.form=document.getElementById("login-form"),this.username=document.getElementById("username"),this.password=document.getElementById("password"),this.error=document.getElementById("login-error"),this.init()}init(){this.form&&this.form.addEventListener("submit",t=>this.handleSubmit(t))}async handleSubmit(t){t.preventDefault();try{const t=await fetch("http://localhost:8080/api/auth/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:this.username.value,password:this.password.value})});if(t.ok){const e=await t.json();localStorage.setItem("token",e.token),this.showMainPage()}else this.showError("登录失败，请检查用户名和密码")}catch(t){this.showError("网络错误，请稍后重试"),console.error("Login error:",t)}}showError(t){this.error.textContent=t,this.error.style.display="block",setTimeout(()=>{this.error.style.display="none"},3e3)}showMainPage(){document.getElementById("login-page").style.display="none",document.getElementById("main-page").style.display="block"}}class TerminalManager{constructor(){this.input=document.getElementById("command-input"),this.sendBtn=document.getElementById("send-btn"),this.output=document.querySelector(".terminal-output"),this.ws=null,this.init()}init(){this.input&&this.input.addEventListener("keydown",t=>this.handleKeyDown(t)),this.sendBtn&&this.sendBtn.addEventListener("click",()=>this.handleSubmit()),this.connectWebSocket()}handleKeyDown(t){"Enter"===t.key&&(t.preventDefault(),this.handleSubmit())}handleSubmit(){const t=this.input.value.trim();t&&(this.sendCommand(t),this.input.value="")}async sendCommand(t){try{this.ws&&this.ws.readyState===WebSocket.OPEN||await this.connectWebSocket(),this.ws.send(JSON.stringify({type:"command",data:t})),this.appendOutput(`> ${t}\n`,"command")}catch(t){this.appendOutput("Error: Connection failed","error"),console.error("Send command error:",t)}}async connectWebSocket(){try{this.ws&&this.ws.close();const t=`ws://localhost:8080/ws?token=${localStorage.getItem("token")}`;this.ws=new WebSocket(t),this.ws.onopen=()=>{this.appendOutput("Connected to server","success")},this.ws.onmessage=t=>{const e=JSON.parse(t.data);this.appendOutput(e.message,"response")},this.ws.onclose=()=>{this.appendOutput("Disconnected from server","error"),setTimeout(()=>this.connectWebSocket(),5e3)},this.ws.onerror=t=>{this.appendOutput("WebSocket error","error"),console.error("WebSocket error:",t)}}catch(t){this.appendOutput("Connection failed","error"),console.error("WebSocket connection error:",t)}}appendOutput(t,e="default"){const o=document.createElement("div");o.textContent=t,o.className=`output-${e}`,this.output.appendChild(o),this.scrollToBottom()}scrollToBottom(){this.output.scrollTop=this.output.scrollHeight}}document.addEventListener("DOMContentLoaded",()=>{const t=new LoginManager;new TerminalManager;localStorage.getItem("token")&&t.showMainPage()});const performanceOptimization={init(){this.optimizePainting(),this.optimizeTouch(),this.optimizeScroll()},optimizePainting(){document.querySelectorAll(".terminal-output, .terminal-input").forEach(t=>{t.style.willChange="transform"})},optimizeTouch(){document.querySelectorAll("input, button").forEach(t=>{t.style.touchAction="manipulation"})},optimizeScroll(){const t=document.querySelector(".terminal-output");t&&(t.style.webkitOverflowScrolling="touch")}};performanceOptimization.init();