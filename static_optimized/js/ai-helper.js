class AIHelper{constructor(){this.providers={openai:{model:"gpt-3.5-turbo",maxTokens:2e3,temperature:.7}},this.conversationHistory=[],this.isProcessing=!1,this.processingTimeout=null,this.init()}init(){websocketManager.addListener("message",s=>{"ai_response"===s.type&&this.handleAIResponse(s)})}async processCommand(s){if(!this.isProcessing){this.isProcessing=!0;try{this.conversationHistory.push({role:"user",content:s});const e={type:"ai_process",data:{providers:Object.keys(this.providers),conversation:this.conversationHistory,timeout:30}};websocketManager.send(e),this.processingTimeout=setTimeout(()=>{this.isProcessing=!1,this.showError("AI处理超时")},3e4)}catch(s){this.isProcessing=!1,this.showError("AI处理失败: "+s.message)}}}handleAIResponse(s){clearTimeout(this.processingTimeout),this.isProcessing=!1,s.error?this.showError(s.error):(this.conversationHistory.push({role:"assistant",content:s.message}),terminalManager.appendOutput(`AI: ${s.message}\n`,"ai-response"))}showError(s){terminalManager.appendOutput(`Error: ${s}\n`,"error")}clearHistory(){this.conversationHistory=[]}getProviders(){return Object.keys(this.providers)}setProviderConfig(s,e){this.providers[s]&&Object.assign(this.providers[s],e)}}const aiHelper=new AIHelper;export default aiHelper;