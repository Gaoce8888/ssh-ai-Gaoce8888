class WebSocketManager{constructor(){this.ws=null,this.reconnectAttempts=0,this.maxReconnectAttempts=5,this.reconnectDelay=1e3,this.isConnected=!1,this.messageQueue=[],this.listeners={open:[],message:[],error:[],close:[]},this.init()}init(){this.connect()}connect(){if(this.ws&&this.ws.readyState===WebSocket.OPEN)return;const e=localStorage.getItem("token");if(e)try{this.ws=new WebSocket(`ws://localhost:8080/ws?token=${e}`),this.ws.onopen=()=>{this.isConnected=!0,this.reconnectAttempts=0,this.trigger("open"),this.processQueue()},this.ws.onmessage=e=>{try{const t=JSON.parse(e.data);this.trigger("message",t)}catch(e){console.error("Failed to parse WebSocket message:",e),this.trigger("error",e)}},this.ws.onerror=e=>{console.error("WebSocket error:",e),this.trigger("error",e),this.reconnect()},this.ws.onclose=()=>{this.isConnected=!1,this.trigger("close"),this.reconnect()}}catch(e){console.error("WebSocket connection failed:",e),this.trigger("error",e),this.reconnect()}else this.trigger("error",new Error("No authentication token"))}reconnect(){this.reconnectAttempts>=this.maxReconnectAttempts?this.trigger("error",new Error("Max reconnect attempts reached")):(this.reconnectAttempts++,setTimeout(()=>{this.connect()},this.reconnectDelay*this.reconnectAttempts))}send(e){if(this.isConnected)try{this.ws.send(JSON.stringify(e))}catch(t){console.error("Failed to send message:",t),this.messageQueue.push(e),this.reconnect()}else this.messageQueue.push(e)}processQueue(){for(;this.messageQueue.length>0&&this.isConnected;){const e=this.messageQueue.shift();this.send(e)}}addListener(e,t){if(!this.listeners[e])throw new Error(`Invalid event type: ${e}`);this.listeners[e].push(t)}removeListener(e,t){this.listeners[e]&&(this.listeners[e]=this.listeners[e].filter(e=>e!==t))}trigger(e,t){(this.listeners[e]||[]).forEach(e=>e(t))}close(){this.ws&&(this.ws.close(),this.ws=null),this.isConnected=!1,this.messageQueue=[]}}const websocketManager=new WebSocketManager;export default websocketManager;